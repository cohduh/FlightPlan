package edu.csc131.FlightPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.maps.DistanceMatrixApi;

import com.google.maps.GeoApiContext;
import com.google.maps.model.DistanceMatrix;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller // This means that this class is a Controller
@RequestMapping(path="/flightPlan") // This means URL's start with /flightPlan (after Application path)
public class surverController {
    @Autowired // This means to get the bean called DataRepo
    // Which is auto-generated by Spring, we will use it to handle the data
    private DataRepo dataRepo;
    private UserData n = new UserData();
    
    @PostMapping(path="/takeFlight") // Map ONLY POST Requests
    public String saveData (@RequestParam String address, Model model) {
      // @ResponseBody means the returned String is the response, not a view name
      // @RequestParam means it is a parameter from the GET or POST request



      System.out.println("hi");
      ModelAndView mv = new ModelAndView ();
      mv.setViewName("/takeFlight.html");
      mv.addObject("foo", "bar");
      ParseJSON parser = new ParseJSON();
      String json = null;
      String[] orgins = new String[]{address};
      String[] destinations = new String[]{"6000 J St, Sacramento, CA 95819"};

      GeoApiContext context = new GeoApiContext.Builder()
      .apiKey("AIzaSyCBpItlEi0pNJV5BJnarqUdQERjmK2t4JM")
      .build();
      try{
        DistanceMatrix results = DistanceMatrixApi.getDistanceMatrix(context,
        orgins,destinations).await();
        Gson gson = new GsonBuilder().create();
        
        json = gson.toJson(results.rows);
        System.out.println(json);

      }catch(Exception e){
        System.out.println(e);//YOU HAVE NO POWER HERE EXCEPTION!
        json="";
        //return "ERROR";
      }finally{
        
      }

      String travelTime = parser.getTimeByCar(json);
      System.out.println(travelTime);


  
      
      n.setAddress(address);
      n.setTravelTime(travelTime);



      //dataRepo.save(n);
      return "redirect:/flightPlan/results";
    }

    @GetMapping(path="/results")
    public String getResults(Model model) {
      //ModelAndView mv = new ModelAndView();
      model.addAttribute("name", n.getAddress());

      
      return "/takeFlight.html";
  }
}

